#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later

set -e -u

confdir=/usr/share/archuseriso
profile=""
options=""
SCRIPTUSER="${SUDO_USER:-}"
WD="$(pwd)"

_usage () {
        echo
        echo 'aui-mkiso, Live ISO image builder.'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkiso <profile> [options]'
        echo
        echo 'Get help:'
        echo 'aui-mkiso --help'
        echo
        exit ${1}
}

_help () {
        echo
        echo 'Archuseriso tool for building a custom Arch Linux Live ISO image.'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkiso <profile> [options]'
        echo
        echo 'Options:'
        echo '-h, --help                          Command line help'
        echo '--addi3wm                           Add i3wm packages: i3-gaps,feh,dmenu,i3status,wmctrl'
        echo '--addpkg <package1,package2,...>    Comma separated list of additional packages'
        echo '-C, --confdir <path>                Archuseriso directory path (default: /usr/share/archuseriso)'
        echo '--embeddir <directory path>         Embed directory in the iso image. Data will be available'
        echo '                                    from the user'\''s live session'
        echo '-l, --language <language>           Set default language:'
        echo '                                    cz, de, es, fr, gr, hu, it, nl, pl, pt, ro, rs, ru, tr, ua'
        echo '--nvidia                            Add Nvidia graphics driver'
        echo '--optimus                           For Optimus hardware. Set Intel iGPU default, Nvidia dGPU'
        echo '                                    configured for PRIME render offload (prime-run <application>)'
        echo '--pkgdir <path>                     User directory containing package files for installation'
        echo '--testing  <package1,package2,...>  Comma separated list of additional packages from testing'
        echo '                                    and community-testing repositories'
        echo '-v, --verbose                       Verbose mode'
        echo '--zfs                               Add ZFS support. Dynamically builds the ZFS packages before'
        echo '                                    building the iso image'
        echo '--efiboot <bootloader>              Select the EFI bootloader to use (default: refind).'
        echo '                                    Provided bootloaders: refind, systemd'
        echo '--rootoverwrite <path>              Directory containing custom files overwrites to the root filesystem'
        echo '                                    Files will be copied between the profile base structure'
        echo '                                    and before packages installation.'
        echo
        echo 'ISO profiles:'
        echo 'console, cinnamon, deepin, gnome, i3, kde, lxqt, mate, xfce'
        echo
        echo 'Build Examples'
        echo
        echo 'Xfce iso with default options:'
        echo 'sudo aui-mkiso xfce'
        echo
        echo 'Xfce, Spanish language, Optimus option:'
        echo 'sudo aui-mkiso xfce --language es --optimus'
        echo
        echo 'Xfce, additional packages, plus user packages (directory containing *.pkg.tar.xz|zst files)'
        echo 'sudo aui-mkiso xfce --addpkg byobu,base-devel --pkgdir ~/mypackages'
        echo
        exit ${1}
}

_build_zfs_packages () {
        local _auiwork="${WD}"/auiwork$(openssl rand -hex 4)
        local _ar64="${_auiwork}/archroot64"
        local _linuxversion _modulesversion _zfspackages _zfssources _zfsversion
        local _ZFSPUBKEY="6AD860EED4598027"
        local _KEYSERVER="ha.pool.sks-keyservers.net"

        # Retrieve ZFS on Linux public key
        if ! sudo --user "${SCRIPTUSER}" gpg --list-public-keys "${_ZFSPUBKEY}" &> /dev/null; then
                echo
                read -r -n1 -p 'Retreive missing ZFS on Linux public key (N/y)? '
                echo
                if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
                        echo 'Operation canceled by user!'
                        exit 0
                fi
                if ! sudo --user "${SCRIPTUSER}" gpg --keyserver "${_KEYSERVER}" --recv "${_ZFSPUBKEY}"; then
                        echo
                        echo "Retreiving ZFS public key ${_ZFSPUBKEY} failed, aborting!"
                        echo
                fi
        fi

        if ! pacman -Q devtools &> /dev/null; then
                echo 'devtools package not installed, aborting!'
                exit 0
        fi
        if ! pacman -Q pacman-contrib &> /dev/null; then
                echo 'pacman-contrib package not installed, aborting!'
                exit 0
        fi
        mkdir -p "${WD}/work/pkgdir"
        mkdir -p "${_ar64}"
        _zfssources=($(curl --silent --retry 3 --retry-connrefused --fail \
                       https://api.github.com/repos/openzfs/zfs/releases/latest | \
                       grep browser_download_url | cut -d':' -f2- | sed 's/"//g'))
        _zfsversion="${_zfssources[0]%/zfs-*}"
        _zfsversion="${_zfsversion#*-}"
        if [[ -z "${_zfsversion}" ]]; then
                echo 'Retrieving ZFS data failed, aborting!'
                exit 0
        fi
        LC_ALL=C mkarchroot -c /var/cache/pacman/pkg "${_ar64}"/root base linux linux-headers base-devel
        if [[ -n "${testingpackages:-}" ]]; then
                unshare --fork --pid pacman --config "${confdir}/pacman-testing.conf" --root "${_ar64}/root" -Sy > /dev/null 2>&1
                for _package in ${testingpackages}; do
                        if [[ "${_package}" = 'linux' ]]; then
                                pacstrap -C "${confdir}/pacman-testing.conf" -c -G -M "${_ar64}/root" linux linux-headers
                        break
                        fi
                done
        fi
        _linuxversion=$(pacman --sysroot "${_ar64}/root" -Q linux | cut -d' ' -f2)
        if [[ "$(cut -d'.' -f3 <<< "${_linuxversion}")" =~ 'arch' ]]; then
                _modulesversion="${_linuxversion%.arch*}.0-${_linuxversion##*.}"
        else
                _modulesversion="${_linuxversion%.arch*}-${_linuxversion##*.}"
        fi
        cp -arT "${confdir}/aui/zfsonlinux" "${_auiwork}/zfsonlinux"
        sed -i "s/%ZFSVERSION%/${_zfsversion}/
                s/%LINUXVERSION%/${_linuxversion}/
                s/%MODULESVERSION%/${_modulesversion}/" \
                "${_auiwork}/zfsonlinux/zfs-utils/PKGBUILD" \
                "${_auiwork}/zfsonlinux/zfs-linux/PKGBUILD"
        cd "${_auiwork}/zfsonlinux/zfs-utils/"
        for _zfslink in "${_zfssources[@]}"; do
                if [[ "${_zfslink}" =~ '.tar.gz'$ ]]; then
                       curl --silent --retry 3 --retry-connrefused --fail -L "${_zfslink}" -O
                       curl --silent --retry 3 --retry-connrefused --fail -L "${_zfslink}".asc -O
                       break
                fi
        done
        cp -a zfs-*.tar.gz{,.asc} ../zfs-linux
        chown -R "${SCRIPTUSER}": "${_auiwork}/zfsonlinux"
        sudo --user "${SCRIPTUSER}" makepkg --geninteg >> PKGBUILD
        sudo --user "${SCRIPTUSER}" updpkgsums
        cd "${_auiwork}/zfsonlinux/zfs-linux/"
        sudo --user "${SCRIPTUSER}" makepkg --geninteg >> PKGBUILD
        sudo --user "${SCRIPTUSER}" updpkgsums
        cd "${_auiwork}/zfsonlinux/zfs-utils/"
        LC_ALL=C sudo --user "${SCRIPTUSER}" \
        makechrootpkg -r "${_ar64}" -- --cleanbuild --clean --force --syncdeps --needed --noconfirm --noprogressbar
        _zfspackages=($(find "${_auiwork}/zfsonlinux/" | grep -e '\.pkg\.tar\.zst$' -e '\.pkg\.tar\.xz$'))
        cd "${_auiwork}/zfsonlinux/zfs-linux/"
        LC_ALL=C sudo --user "${SCRIPTUSER}" \
        makechrootpkg -r "${_ar64}" -I "${_zfspackages[0]}" -- --cleanbuild --clean --force --syncdeps --needed --noconfirm --noprogressbar
        _zfspackages=($(find "${_auiwork}/zfsonlinux/" | grep -e '\.pkg\.tar\.zst$' -e '\.pkg\.tar\.xz$'))
        if [[ -n "${AUI_USERPKGDIR:-}" ]]; then
                cp "${_zfspackages[@]}" "${AUI_USERPKGDIR}"
        else
                cp "${_zfspackages[@]}" "${WD}/work/pkgdir"
                export AUI_USERPKGDIR="${WD}/work/pkgdir"
        fi
        rm -r "${_auiwork}"
}

OPTS=$(getopt -o 'C:hl:v' -l 'addi3wm,addpkg:,confdir:,embeddir:,help' \
       -l 'language:,nvidia,optimus,pkgdir:,testing:,verbose,zfs,efiboot:,rootoverwrite:' -n 'aui-mkiso' -- "$@")
[[ $? -eq 0 ]] || _usage 1
eval set -- "${OPTS}"
unset OPTS
[[ $# -eq 1 ]] && _usage 0

while true; do
        case "${1}" in
                '--addi3wm')
                        export AUI_ADDITIONALPKGS+="i3-gaps feh dmenu i3status wmctrl rxvt-unicode "
                        AUI_ISONAME+=(i3)
                        shift ;;
                '--addpkg')
                        export AUI_ADDITIONALPKGS+="$(tr ',' ' ' <<< ${2}) "
                        shift 2 ;;
                '-C'|'--confdir')
                        confdir="${2}"
                        shift 2 ;;
                '--embeddir')
                        export AUI_EMBEDDIR="${2}"
                        shift 2 ;;
                '-h'|'--help')
                        options="-h "
                        shift ;;
                '--language')
                        options+="-l ${2} "
                        shift 2 ;;
                '--nvidia')
                        export AUI_ADDITIONALPKGS+="nvidia nvidia-settings bbswitch "
                        AUI_ISONAME+=(nvidia)
                        shift ;;
                '--optimus')
                        export AUI_ADDITIONALPKGS+="nvidia nvidia-settings nvidia-prime "
                        export AUI_OPTIMUS=1
                        AUI_ISONAME+=(optimus)
                        shift ;;
                '--pkgdir')
                        export AUI_USERPKGDIR="${2}"
                        shift 2 ;;
                '--testing')
                        testingpackages="$(tr ',' ' ' <<< ${2})"
                        options+="--testing ${2}"
                        shift 2 ;;
                '-v'|'verbose')
                        options+="-v "
                        shift ;;
                '--zfs')
                        AUI_ZFSSUPPORT="yes"
                        AUI_ISONAME+=(zfs)
                        shift ;;
                '--efiboot')
                        options+="--efiboot ${2}"
                        shift 2 ;;
                '--rootoverwrite')
                        export AUI_ROOTOVERWRITEDIR="${2}"
                        shift 2 ;;
                '--')
                        shift
                        break ;;
        esac
done

if [[ -n "${AUI_ISONAME[@]:-}" ]]; then
        AUI_ISONAMEOPTION="$(sed 's/\s/\n/g' <<< "${AUI_ISONAME[@]}" | sort | sed ':a;N;$!ba;s/\n/-/g')"
        if [[ "console" = "${1}" ]]; then
                if grep -q zfs <<< "${AUI_ISONAMEOPTION}"; then
                        AUI_ISONAMEOPTION="zfs"
                else
                        AUI_ISONAMEOPTION=""
                fi
        fi
        if grep -q optimus <<< "${AUI_ISONAMEOPTION}"; then
                AUI_ISONAMEOPTION="$(sed 's/-nvidia//' <<< "${AUI_ISONAMEOPTION}")"
        fi
        if [[ -n "${AUI_ISONAMEOPTION}" ]]; then
                export AUI_ISONAMEOPTION
        fi
fi


if [[ $# -eq 0 && "${options}" =~ '-h' ]]; then
       _help 0
fi
if [[ $# -ne 1 ]]; then
       echo 'Error: invalid arguments!'
       _usage 1
fi

case "${1}" in
        cinnamon | deepin | gnome | i3 | kde | lxqt | mate | xfce )
                profile="${1}" ;;
        console)
                echo
                echo 'Console iso building: some options may be ignored!'
                sleep 3
                profile="${1}" ;;
        *)
                echo
                echo "The profile ${1} does not exist!"
                _usage 1 ;;
esac

if [[ ! "${options}" =~ '-h' && ${EUID} -ne 0 ]]; then
        echo "This script must be run as root."
        echo
        echo "help:"
        echo "aui-mkiso -h"
        exit 1
fi

if [[ -d "work" ]]; then
        echo \'work\'' directory exists, aborting!'
        exit 0
fi

if [[ -n "${AUI_ZFSSUPPORT:-}" ]]; then
        if [[ "${SCRIPTUSER}" = 'root' || -z "${SUDO_USER:-}" ]]; then
                echo
                echo 'Option for ZFS support:'
                echo 'The script must be run from a _user session_ using sudo!'
                echo 'Aborting...'
                exit 0
        fi
        _build_zfs_packages
        cd "${WD}"
fi

# Launch the build script:
eval "${confdir}/build.sh --profile ${profile} ${options}"

# vim: set expandtab:
